# THE OVERMIND PROTOCOL - Production Docker Compose
# Complete stack for AI-enhanced HFT trading system

version: '3.8'

services:
  # ============================================================================
  # THE OVERMIND PROTOCOL - Core Services
  # ============================================================================
  
  # TensorZero Gateway - AI Decision Engine
  tensorzero-gateway:
    image: tensorzero/gateway:latest
    container_name: overmind-tensorzero
    ports:
      - "3000:3000"
    environment:
      - TENSORZERO_DATABASE_URL=postgresql://tensorzero:${TENSORZERO_DB_PASSWORD}@tensorzero-db:5432/tensorzero
      - TENSORZERO_REDIS_URL=redis://tensorzero-dragonfly:6379
      - TENSORZERO_LOG_LEVEL=info
      - TENSORZERO_OPENAI_API_KEY=${OPENAI_API_KEY}
      - TENSORZERO_ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - tensorzero-db
      - tensorzero-dragonfly
    volumes:
      - ./tensorzero-config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - overmind-network

  # TensorZero Database
  tensorzero-db:
    image: postgres:15-alpine
    container_name: overmind-tensorzero-db
    environment:
      - POSTGRES_DB=tensorzero
      - POSTGRES_USER=tensorzero
      - POSTGRES_PASSWORD=${TENSORZERO_DB_PASSWORD}
    volumes:
      - tensorzero-db-data:/var/lib/postgresql/data
      - ./tensorzero-init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - overmind-network

  # TensorZero Dragonfly Cache
  tensorzero-dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: overmind-tensorzero-dragonfly
    command: dragonfly --logtostderr
    volumes:
      - tensorzero-dragonfly-data:/data
    restart: unless-stopped
    networks:
      - overmind-network
    ulimits:
      memlock: -1

  # ============================================================================
  # THE OVERMIND PROTOCOL - Main Trading System
  # ============================================================================
  
  # SNIPERCOR with OVERMIND Protocol
  overmind-trading:
    build:
      context: .
      dockerfile: Dockerfile.overmind
    container_name: overmind-trading-system
    environment:
      # Trading Configuration
      - SNIPER_TRADING_MODE=paper
      - SNIPER_MAX_POSITION_SIZE=1000.0
      - SNIPER_MAX_DAILY_LOSS=500.0
      
      # THE OVERMIND PROTOCOL Configuration
      - OVERMIND_ENABLED=true
      - OVERMIND_TENSORZERO_URL=http://tensorzero-gateway:3000
      - OVERMIND_JITO_ENDPOINT=https://mainnet.block-engine.jito.wtf
      - OVERMIND_MAX_LATENCY_MS=25
      - OVERMIND_AI_CONFIDENCE_THRESHOLD=0.7
      
      # Solana Configuration (DEVNET for testing)
      - SNIPER_SOLANA_RPC_URL=${SOLANA_DEVNET_RPC_URL}
      - SNIPER_SOLANA_WSS_URL=${SOLANA_DEVNET_WSS_URL}
      - SNIPER_WALLET_PRIVATE_KEY=${SOLANA_WALLET_PRIVATE_KEY}
      
      # API Keys
      - SNIPER_HELIUS_API_KEY=${HELIUS_API_KEY}
      - SNIPER_QUICKNODE_API_KEY=${QUICKNODE_API_KEY}
      
      # Database
      - SNIPER_DATABASE_URL=postgresql://sniper:${SNIPER_DB_PASSWORD}@overmind-db:5432/snipercor
      
      # Server
      - SNIPER_SERVER_PORT=8080
      - SNIPER_LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      - overmind-db
      - tensorzero-gateway
      - prometheus
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - overmind-network

  # ============================================================================
  # Database Services
  # ============================================================================
  
  # Main Database for SNIPERCOR
  overmind-db:
    image: postgres:15-alpine
    container_name: overmind-database
    environment:
      - POSTGRES_DB=snipercor
      - POSTGRES_USER=sniper
      - POSTGRES_PASSWORD=${SNIPER_DB_PASSWORD}
    volumes:
      - overmind-db-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - overmind-network

  # Dragonfly - High-Performance Redis Replacement
  overmind-dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: overmind-dragonfly
    command: dragonfly --logtostderr --requirepass=${REDIS_PASSWORD}
    volumes:
      - overmind-dragonfly-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - overmind-network
    ulimits:
      memlock: -1

  # ============================================================================
  # Workflow Orchestration - Kestra Integration
  # ============================================================================

  # Kestra Workflow Engine (External - Connect to existing)
  # Note: This assumes you have Kestra running externally
  # THE OVERMIND PROTOCOL will connect to your existing Kestra instance

  # ============================================================================
  # Monitoring and Observability
  # ============================================================================
  
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: overmind-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - overmind-network

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: overmind-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - overmind-network

  # AlertManager - Alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: overmind-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - overmind-network

  # ============================================================================
  # Logging and Analysis
  # ============================================================================
  
  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: overmind-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - overmind-network

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: overmind-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - overmind-network

# ============================================================================
# Networks and Volumes
# ============================================================================

networks:
  overmind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  # TensorZero Data
  tensorzero-db-data:
  tensorzero-dragonfly-data:

  # Main System Data
  overmind-db-data:
  overmind-dragonfly-data:
  
  # Monitoring Data
  prometheus-data:
  grafana-data:
  alertmanager-data:
  
  # Logging Data
  elasticsearch-data:
